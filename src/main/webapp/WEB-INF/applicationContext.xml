<?xml version='1.0' encoding='UTF-8' ?>
<!-- was: <?xml version="1.0" encoding="UTF-8"?> -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/aop 
                           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                           http://www.springframework.org/schema/tx 
                           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security-4.1.xsd">

    
    <!-- Se especifica la ruta del archivo que tendra los datos de la conexión a la BD,
     en este caso el archivo se llama database.properties y se encuentra dentro de 
     la carpeta WEB-INF -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" p:location="/WEB-INF/database.properties"/>

    <!--  Bean que realiza la conexión a la BD usando la informacion de database.properties-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"
        p:driverClassName="${jdbc.driverClassName}"
        p:url="${jdbc.url}"
        p:username="${jdbc.username}"
        p:password="${jdbc.password}"/>
    
    <bean id="hibernate4AnnotatedSessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <!--Clases para el mapeo-->
                <value>mx.unam.ciencias.is.modelo.Usuario</value>
                <value>mx.unam.ciencias.is.modelo.Nivel</value>
                <value>mx.unam.ciencias.is.modelo.Materia</value>
                <value>mx.unam.ciencias.is.modelo.Alumno</value>
                <value>mx.unam.ciencias.is.modelo.Profesor</value>
                <value>mx.unam.ciencias.is.modelo.Session</value>
                <value>mx.unam.ciencias.is.modelo.Pedir_session</value>
                
                
                
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">false</prop>
            </props>
        </property>
    </bean>
    
    
    <!--  Se agrega para poder inyectarlo a los Controladores, revisa EjemploController.java
          en el paquete controlador, se esta haciendo uso de @Autowiring-->
    <!--Ejemplo para configurar bean-->
    <bean id="UsuarioDAO" class="mx.unam.ciencias.is.modelo.UsuarioDAO" p:sessionFactory-ref="hibernate4AnnotatedSessionFactory"/>
     <bean id="NivelDAO" class="mx.unam.ciencias.is.modelo.NivelDAO" p:sessionFactory-ref="hibernate4AnnotatedSessionFactory"/>
    <bean id="MateriaDAO" class="mx.unam.ciencias.is.modelo.MateriaDAO" p:sessionFactory-ref="hibernate4AnnotatedSessionFactory"/>
    <bean id="AlumnoDAO" class="mx.unam.ciencias.is.modelo.AlumnoDAO" p:sessionFactory-ref="hibernate4AnnotatedSessionFactory"/>
    <bean id="ProfesorDAO" class="mx.unam.ciencias.is.modelo.ProfesorDAO" p:sessionFactory-ref="hibernate4AnnotatedSessionFactory"/>
    <bean id="SessionDAO" class="mx.unam.ciencias.is.modelo.SessionDAO" p:sessionFactory-ref="hibernate4AnnotatedSessionFactory"/>
    <bean id="Pedir_sessionDAO" class="mx.unam.ciencias.is.modelo.Pedir_sessionDAO" p:sessionFactory-ref="hibernate4AnnotatedSessionFactory"/>
  
    <!-- SpringSecurity -->
    <security:http pattern="/css/*" security="none"/>
    <security:http pattern="/imagenes/*" security="none"/>
    <security:http pattern="/js/*" security="none"/>
    
    <!-- aqui se interceptan las peticiones de nuestra aplicacion-->
    <security:http auto-config='true'>
        <!-- si la peticion es "/" dejamos pasar a todos -->
        <security:intercept-url pattern="/" access="permitAll" />
        <!-- toda peticion con el texto /sesion/ antes de el nombre de la peticion
        solo los que iniciaron sesion pueden acceder -->
        <security:intercept-url pattern="/sesion/*" access="isAuthenticated()" />
        <security:intercept-url pattern="/admin/*" access=" hasRole('ROLE_Admin')" />
        <security:intercept-url pattern="/root/*" access=" hasRole('ROLE_Root')" /> 
        <security:intercept-url pattern="/alum/*" access=" hasRole('ROLE_Alumno')" />
        <security:intercept-url pattern="/prof/*" access=" hasRole('ROLE_Profesor')" />
        <security:intercept-url pattern="/amb/*" access=" hasRole('ROLE_Ambos')" />
        <!--se configura el comportamiento de el login -->
        <security:form-login login-page="/"
                             authentication-failure-url="/?login_error=1"
                             default-target-url="/home"
                             always-use-default-target="true"/>
        <security:csrf disabled="true"/>
        <security:access-denied-handler error-page="/error403" />
        <security:logout logout-success-url="/"
                         delete-cookies="JSESSIONID"/>
    </security:http>
    
    <!--Aqui se configuran los usuarios -->
    <security:authentication-manager>
        <security:authentication-provider>
            <!-- Se puede encriptar las contrasenia-->
            <security:password-encoder hash="bcrypt" />
            <!--<security:user-service>-->
                <!-- Se da de alta el usuario la contrasenia y el rol-->
                <!--<security:user name="ElJhon" password="1234" authorities="ROLE_Usuario" />-->
                <!--<security:user name="ElPapaJhon" password="1234" authorities="ROLE_Admin" />-->
                <!--<security:user name="DonJhon" password="1234" authorities="ROLE_Root" />-->
               
            <!--</security:user-service>-->
            <!--Asi optenemos el usuarios desde la base de datos -->
            <!--En este caso se esta utilizando el correo como forma de identificacion para el usuario--> 
            <security:jdbc-user-service data-source-ref="dataSource" 
                users-by-username-query= "select u.correo,u.contrasenia,1 from usuario u where u.correo = ?;"
                authorities-by-username-query="select u.correo,u.rol,1 from usuario u where u.correo = ?;"
            />
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- SpringSecurity -->

</beans>
